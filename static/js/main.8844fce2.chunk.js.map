{"version":3,"sources":["components/Search/Search.module.scss","components/Section/Section.module.scss","components/Contacts/Contacts.module.scss","components/Filter/Filter.module.scss","redux/contacts/phonebook-actions.js","redux/contacts/phonebook-selectors.js","components/Section/Section.js","components/Search/Search.js","components/Contacts/Contact.js","components/Contacts/Contacts.js","components/Filter/Filter.js","App.js","redux/contacts/phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContacts","createAction","dellContacts","addFilter","getFilter","state","contacts","filter","filterContacts","createSelector","items","normalizeFilter","toLowerCase","contact","name","includes","Section","children","title","className","s","Container","Title","Search","onSubmit","useState","setName","number","setNumber","handleChange","e","currentTarget","value","reset","SearchForm","preventDefault","Form","type","pattern","required","onChange","Button","Contact","id","deleteContact","onClick","Contacts","length","map","item","Filter","App","useSelector","dispatch","useDispatch","data","isUniqueName","find","elem","alert","text","userId","nanoid","actions","contactId","itemReducer","createReducer","action","payload","filterReducer","combineReducers","persistConfig","key","storage","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","contactsReducer","persisterReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.8844fce2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchForm\":\"Search_SearchForm__Tcgsn\",\"Button\":\"Search_Button__3ZxTN\",\"Form\":\"Search_Form__2WLC3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__bD7KE\",\"Container\":\"Section_Container__1Vkl0\",\"Title\":\"Section_Title__3oL7a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"Contacts_Contact__PGyjg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__36WlE\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContacts = createAction('contacts/addItem');\r\nexport const dellContacts = createAction('contacts/dellContacts');\r\nexport const addFilter = createAction('contacts/addFilter');\r\n","import { createSelector } from 'reselect';\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const filterContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizeFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizeFilter),\r\n    );\r\n  },\r\n);\r\n","import PropTypes from 'prop-types';\nimport s from './Section.module.scss';\n\nconst Section = ({ children, title }) => {\n  return (\n    <section className={s.Section}>\n      <div className={s.Container}>\n        <h2 className={s.Title}>{title}</h2>\n        {children}\n      </div>\n    </section>\n  );\n};\n\nSection.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Search.module.scss';\n\nconst Search = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.SearchForm} onSubmit={handleSubmit}>\n      <label className={s.Form}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={s.Form}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={s.Button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\nSearch.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default Search;\n","import PropTypes from 'prop-types';\nimport s from './Contacts.module.scss';\n\nconst Contact = ({ name, number, id, deleteContact }) => {\n  return (\n    <li className={s.Contact}>\n      <p>\n        {name}:{number}\n      </p>\n      <button onClick={() => deleteContact(id)}>Delete</button>\n    </li>\n  );\n};\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\nexport default Contact;\n","import PropTypes from 'prop-types';\nimport Contact from './Contact';\n\nconst Contacts = ({ contacts, deleteContact }) => {\n  return (\n    <ul>\n      {contacts.length > 0 &&\n        contacts.map(item => (\n          <Contact\n            key={item.id}\n            name={item.name}\n            number={item.number}\n            id={item.id}\n            deleteContact={deleteContact}\n          />\n        ))}\n    </ul>\n  );\n};\nContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\nexport default Contacts;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.scss';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={s.Filter}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        onChange={onChange}\n        value={value}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport * as actions from './redux/contacts/phonebook-actions';\nimport {\n  filterContacts,\n  getFilter,\n} from './redux/contacts/phonebook-selectors';\nimport Section from 'components/Section/Section';\nimport Search from 'components/Search/Search';\nimport Contacts from 'components/Contacts/Contacts';\nimport Filter from 'components/Filter/Filter';\nimport { alert } from '@pnotify/core';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\nimport { nanoid } from 'nanoid';\n\nconst App = () => {\n  const contacts = useSelector(filterContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const formSubmitHandler = data => {\n    let isUniqueName = contacts.find(elem => elem.name.includes(data.name));\n\n    if (!isUniqueName) {\n      const userId = { id: nanoid() };\n      dispatch(actions.addContacts([...contacts, { ...userId, ...data }]));\n    } else {\n      const myAlert = alert({\n        title: 'Alert',\n        text: `${isUniqueName.name} is already in contacts`,\n      });\n    }\n  };\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n    dispatch(actions.addFilter(value));\n  };\n  const deleteContact = contactId => {\n    dispatch(actions.dellContacts(contactId));\n  };\n  return (\n    <>\n      <Section title={'Phonebook'}>\n        <Search onSubmit={formSubmitHandler} />\n      </Section>\n      <Section title={'Contacts'}>\n        <Filter value={filter} onChange={handleChange} />\n        <Contacts contacts={contacts} deleteContact={deleteContact} />\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addContacts, addFilter, dellContacts } from './phonebook-actions';\r\n\r\nconst itemReducer = createReducer([], {\r\n  [addContacts]: (state, action) => action.payload,\r\n  [dellContacts]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\nconst filterReducer = createReducer('', {\r\n  [addFilter]: (state, action) => action.payload,\r\n});\r\nexport default combineReducers({\r\n  items: itemReducer,\r\n  filter: filterReducer,\r\n});\r\n","import {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/phonebook-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  REGISTER,\r\n  PURGE,\r\n  PERSIST,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n};\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\nconst persisterReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persisterReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App.js';\nimport './style/index.scss';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}